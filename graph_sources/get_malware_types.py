
from pymongo import MongoClient
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import pandas as pd

# This script creates a barplot of malware types

##################################################################################
# MongoDB CONFIG â€“ edit these if needed
MONGO_URI = 'mongodb://localhost:27017/'  # MongoDB URI (add credentials if needed)
MONGO_DB = 'drdb'                         # Database name
MONGO_COLLECTION = 'malware'              # Collection name
##################################################################################

# Connect to MongoDB
client = MongoClient(MONGO_URI)
db = client[MONGO_DB]
collection = db[MONGO_COLLECTION]

def load_malware_type_from_mongo():
    """Return dict {malware_type: count} directly from MongoDB"""
    malware_types = {}
    for doc in collection.find({}, {"_id": 0, "malware_type": 1}):
        mtype = doc.get("malware_type")
        if isinstance(mtype, str) and mtype.strip():
            mtype = mtype.strip()
            
            # Skip "unknown"
            if mtype.lower() == "unknown": 
                continue
            malware_types[mtype] = malware_types.get(mtype, 0) + 1
    return malware_types

##################################################################################

def plot_malware_type(malware_types: dict):
    # Sort the dictionary by value
    malware_types = dict(sorted(malware_types.items(), key=lambda x:x[1], reverse=True))

    # Others when appearance of the malware types is <= 100
    malware_types["Others"] = 0
    removed_malware_types = []
    others_count = 0

    for typ in list(malware_types.keys()):
        if typ == "Others":
            continue
        if malware_types[typ] <= 100:
            others_count += 1
            malware_types["Others"] += malware_types[typ]
            removed_malware_types.append(typ)

    for typ in removed_malware_types:
        del malware_types[typ]

    malware_types[f"Others ({others_count})"] = malware_types.pop("Others")

    # Convert dictionary to DataFrame
    df = pd.DataFrame(list(malware_types.items()), columns=['Name', 'Number'])
    print(df)

    # Define a custom color palette
    custom_palette = sns.color_palette("cividis", len(df))

    # Plotting using Seaborn with switched axes
    plt.figure(num=None, figsize=(20, 15), dpi=80, facecolor='w', edgecolor='r')
    ax = sns.barplot(x='Number', y='Name', data=df, palette=custom_palette)
    plt.xscale('log')

    # Displaying the numbers next to the bars
    for p in ax.patches:
        ax.annotate(f'{p.get_width():.0f}',
                    (p.get_width(), p.get_y() + p.get_height() / 2.),
                    ha='center', va='center', fontsize=14, fontweight="bold",
                    color='black', xytext=(25, 0),
                    textcoords='offset points')

    # Set fontsize for axis labels
    ax.set_xlabel('Number of domains', fontsize=18, fontweight="bold")
    ax.set_ylabel('Malware name', fontsize=18, fontweight="bold")

    # Set fontsize for tick labels
    ax.tick_params(axis='both', which='major', labelsize=13)    

    print(ax.get_yaxis_text1_transform)   

    plt.tight_layout()

    plt.savefig('malware_types_barplot.png')
    plt.savefig('malware_types_barplot.pdf')
    plt.show()

##################################################################################

if __name__ == "__main__":
    malware_types = load_malware_type_from_mongo()
    plot_malware_type(malware_types)