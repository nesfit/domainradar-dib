# This script creates a barplot of malware types among malware domains

import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import pandas as pd
import json
import re
import os

##################################################################################

def help_print():
    print("Usage: python3 run.py <method> <filename>")
    print("Method: domains, threat, malware, dga")
    exit(1)

##################################################################################

def open_json(filename):
    with open(filename, "r") as domains_file:
        data = json.load(domains_file)
    return data

##################################################################################
y
def remove_IP_addresses(domain):
    # Remove IP addresses 
    if re.match(r'\d+.\d+.\d+.\d+:\d+', domain): 
        return True
    elif re.match(r'https?://\S+', domain):
        return True
    elif re.match(r'^[^.]*$', domain):
        return True
    return False

##################################################################################

def load_domains():
    unique_domains = set() # For unique domains
    if (len(sys.argv) > 2):
        data = open_json(sys.argv[2])
    else:
        help_print()

    # Reading old domains in that file for preventing duplicates from new ones
    with open("malware_domains/threatfox_domains.txt", "r") as old_domains:
        for domain in old_domains:
            unique_domains.add(domain.strip())

    # Adding new domains
    with open("malware_domains/threatfox_domains.txt", "w") as domains:
        for key, value_list in data.items():
            for item in value_list:
                if remove_IP_addresses(item["ioc"].strip()):
                    continue
                unique_domains.add(item["ioc"].strip())
        
        for index, domain in enumerate(unique_domains):
            if index == len(unique_domains) - 1:                
                print(domain, file=domains, end="")
                continue
            else:
                print(domain, file=domains)
        
##################################################################################

def load_malware_threat_type():
    # Erase file
    with open("malware_domains/temp/domains_threat_types_temp.txt", "a+") as file:
        file.truncate(0)
    
    unique_domains_threats = set()
    folder_path = 'scraped_data/json/'
    # Iterate through files in the folder
    for filename in os.listdir(folder_path):
        # Check if the current item is a file
        if os.path.isfile(os.path.join(folder_path, filename)):
            data = open_json(f"{folder_path}/{filename}")
            with open("malware_domains/temp/domains_threat_types_temp.txt", "a") as domains_threat_types_temp:
                for key, value_list in data.items():
                    for item in value_list:
                        # Skip the domain and its type
                        if remove_IP_addresses(item["ioc"].strip()):
                            continue
                        print(f"{item["ioc"].strip()}, {item["threat_type"].strip()}", file=domains_threat_types_temp)
        else:
            print("File not exists.")
    
    with open("malware_domains/temp/domains_threat_types_temp.txt", "r") as domains_threat_types_temp:
        # Remove duplicates from domains_threat_types_temp.txt
        for domain in domains_threat_types_temp:
            unique_domains_threats.add(domain.strip())
    # Convert set to list
    unique_domains_threats = list(unique_domains_threats)

    # Save domains and its threat types
    with open("malware_domains/threatfox_domains.txt", "r") as domains:
        with open("malware_domains/Petka_threatfox_domains.txt", "r") as Petka_domains:
            with open("malware_domains/domains_threat_types.txt", "w") as domains_threat_types:
                for domain in domains:
                    for item in unique_domains_threats:
                        if domain.strip() == item.split(',')[0]:
                            print(item, file=domains_threat_types)
                for domain in Petka_domains:
                    for item in unique_domains_threats:
                        if domain.strip() == item.split(',')[0]:
                            print(item, file=domains_threat_types)

##################################################################################

def dga_domains():
    with open("malware_domains/domains_threat_types.txt", "r") as domains_threat_types: 
        with open("malware_domains/dga_domains.txt", "w") as dga_domains:  
            for domain in domains_threat_types:
                if domain.split(',')[1].strip() == "botnet_cc":
                    print(domain.split(',')[0].strip(), file=dga_domains)

##################################################################################

def load_malware_type():
    # Erase file
    with open("malware_domains/temp/domains_malware_types_temp.txt", "a+") as file:
        file.truncate(0)
    
    unique_domains_malware = set()
    folder_path = 'scraped_data/json/'
    # Iterate through files in the folder
    for filename in os.listdir(folder_path):
        # Check if the current item is a file
        if os.path.isfile(os.path.join(folder_path, filename)):
            data = open_json(f"{folder_path}/{filename}")
            with open("malware_domains/temp/domains_malware_types_temp.txt", "a") as domains_malware_types_temp:
                for key, value_list in data.items():
                    for item in value_list:
                        # Skip the domain and its type
                        if remove_IP_addresses(item["ioc"].strip()):
                            continue
                        print(f"{item["ioc"].strip()}, {item["malware_printable"].strip()}", file=domains_malware_types_temp)
        else:
            print("File not exists.")
    
    with open("malware_domains/temp/domains_malware_types_temp.txt", "r") as domains_malware_types_temp:
        # Remove duplicates from domains_malware_types_temp.txt
        for domain in domains_malware_types_temp:
            unique_domains_malware.add(domain.strip())
    # Convert set to list
    unique_domains_malware = list(unique_domains_malware)

    # Save domains and its malware types
    with open("malware_domains/threatfox_domains.txt", "r") as domains:
        with open("malware_domains/Petka_threatfox_domains.txt", "r") as Petka_domains:
            with open("malware_domains/domains_malware_types.txt", "w") as domains_malware_types:
                for domain in domains:
                    for item in unique_domains_malware:
                        if domain.strip() == item.split(',')[0]:
                            print(item, file=domains_malware_types)
                for domain in Petka_domains:
                    for item in unique_domains_malware:
                        if domain.strip() == item.split(',')[0]:
                            print(item, file=domains_malware_types)

##################################################################################

def plot_malware_threat_type():
    malware_threat_types = {}

    # Read data from file
    with open('malware_domains/domains_threat_types.txt', 'r') as malware_threat_type_file:
        for domain in malware_threat_type_file:
            typ = domain.split(',')[1].strip()
            if typ in malware_threat_types:
                malware_threat_types[typ] += 1
            else:
                malware_threat_types[typ] = 1 

    # Getting the percentage of each threat type
    numbers = list(malware_threat_types.values())
    names = list(malware_threat_types.keys())
    percentage = [number/sum(numbers)*100 for number in numbers]

    fig, ax = plt.subplots(figsize=(10, 3), subplot_kw=dict(aspect="equal"))

    wedges, texts = ax.pie(numbers, wedgeprops=dict(width=0.5), startangle=-40)

    bbox_props = dict(boxstyle="square,pad=0.3", fc="w", ec="k", lw=0.72)
    kw = dict(arrowprops=dict(arrowstyle="-"),
            bbox=bbox_props, zorder=0, va="center")

    for i, p in enumerate(wedges):
        ang = (p.theta2 - p.theta1)/2. + p.theta1
        y = np.sin(np.deg2rad(ang))
        x = np.cos(np.deg2rad(ang))
        horizontalalignment = {-1: "right", 1: "left"}[int(np.sign(x))]
        connectionstyle = f"angle,angleA=0,angleB={ang}"
        kw["arrowprops"].update({"connectionstyle": connectionstyle})
        ax.annotate(f"{names[i]}: {numbers[i]} values, ({percentage[i]:.2f} %)", xy=(x, y), xytext=(1.1*np.sign(x), 1.2*y),
                    horizontalalignment=horizontalalignment, **kw)

    ax.set_title("Malware threat types", fontweight='bold')

    plt.savefig('graphs/malware_threat_types_piechart.png')
    plt.savefig('graphs/malware_threat_types_piechart.pdf')
    plt.show()


##################################################################################

def plot_malware_type():
    malware_types = {}
    with open('malware_domains/domains_malware_types.txt', 'r') as malware_type_file:
        for domain in malware_type_file:
            typ = domain.split(',')[1].strip()
            if typ in malware_types:
                malware_types[typ] += 1
            else:
                malware_types[typ] = 1

    # Sort the dictinary by value
    malware_types = dict(sorted(malware_types.items(), key=lambda x:x[1], reverse=True))

    # Others when appearence of the malware types is less than 10
    malware_types["Others"] = 0
    other_malware_types = {} #for legend
    removed_malware_types = [] #for removing
    others_count = 0

    for typ in malware_types:
        if malware_types[typ] <= 100:
            others_count +=1
            malware_types["Others"] += malware_types[typ]
            other_malware_types[typ] = malware_types[typ]
            removed_malware_types.append(typ)

    for typ in removed_malware_types:
        del malware_types[typ]

    malware_types[f"Others ({others_count})"] = malware_types.pop("Others") # define how much malware type in the others

    # Convert dictionary to DataFrame
    df = pd.DataFrame(list(malware_types.items()), columns=['Name', 'Number'])
    print(df)

    # Define a custom color palette with more colors
    custom_palette = sns.color_palette("cividis", len(df))

    # Plotting using Seaborn with switched axes
    plt.figure(num=None, figsize=(20, 15), dpi=80, facecolor='w', edgecolor='r')
    ax = sns.barplot(x='Number', y='Name', data=df, palette=custom_palette)  # Switched x and y
    plt.xscale('log')  # Set logarithmic scale for x-axis

    # Displaying the numbers next to the bars
    for p in ax.patches:
        ax.annotate(f'{p.get_width():.0f}', (p.get_width(), p.get_y() + p.get_height() / 2.),
                    ha='center', va='center', fontsize=14, fontweight="bold", color='black', xytext=(25, 0),
                    textcoords='offset points')

    # Set fontsize for axis labels
    ax.set_xlabel('Number of domains', fontsize=18, fontweight="bold")
    ax.set_ylabel('Malware name', fontsize=18, fontweight="bold")

    # Set fontsize for tick labels
    ax.tick_params(axis='both', which='major', labelsize=13)    

    print(ax.get_yaxis_text1_transform)   

    plt.tight_layout()

    plt.savefig('graphs/malware_types_barplot.png')
    plt.savefig('graphs/malware_types_barplot.pdf')
    plt.show()
##################################################################################

def call_method(method):
    if method == "domains":
        load_domains()
    elif method == "threat":
        load_malware_threat_type()
        plot_malware_threat_type()
    elif method == "malware":
        # load_malware_type()
        plot_malware_type()
    elif method == "dga":
        dga_domains()
    else:
        help_print()

##################################################################################  

if __name__ == "__main__":
    import sys
    if (len(sys.argv) > 1):
        call_method(sys.argv[1])
    else:
        help_print()